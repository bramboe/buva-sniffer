substitutions:
  hostname: cc1101-sniffer
  device_name: CC1101 Sniffer
  device_id: cc1101_sniffer

esphome:
  name: ${hostname}
  comment: ${device_name}
  platform: ESP32
  board: esp32dev

  # RadioLib dependency (PlatformIO will fetch this)
  libraries:
    - "jgromes/RadioLib"

# Keep your style (logger, wifi, api, ota, webserver, etc)
logger:
  level: DEBUG
  baud_rate: 115200

# Enable Home Assistant API
api:
  encryption:
    key: !secret buva_api

ota:
  - platform: esphome
    password: !secret buva_ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "BUVA RF Sniffer Fallback"
    password: !secret buva_ap

web_server:
  port: 80

# SPI bus used by CC1101 (adjust pins if you like)
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

# Pull the sniffer component from your GitHub repo
external_components:
  - source: github://bramboe/buva-sniffer
    components: [ cc1101_sniffer ]
    refresh: 0s

# Include the header (it will be available from the external component repo)
includes:
  - "cc1101_sniffer_component.h"

# Globals: frequency can be changed here. Start at 868.300 or 433.920
globals:
  - id: cc1101_freq
    type: float
    initial_value: "868.300"

# Instantiate the sniffer component via a lambda (pass pins + frequency)
custom_component:
  - lambda: |-
      // CS pin, GDO0 pin, GDO2 pin (optional), frequency in MHz
      auto *sn = new CC1101SnifferComponent(5, 4, 15, id(cc1101_freq));
      App.register_component(sn);
      // expose pointer to the component using its global id so it can be referenced
      return {sn};

# A text_sensor that will show the last packet in Home Assistant
text_sensor:
  - platform: template
    name: "${device_name} Last Packet"
    id: ${device_id}_last_packet
    icon: "mdi:radio-tower"
    update_interval: 10s
    lambda: |-
      // The component publishes into its own text_sensor; retrieve last state
      auto *comp = (CC1101SnifferComponent*)App.get_component_by_type("CC1101SnifferComponent");
      if (comp && comp->packet_text_sensor) {
        return comp->packet_text_sensor->state.c_str();
      }
      return std::string("");

# Optional: wifi signal + uptime sensors
sensor:
  - platform: wifi_signal
    name: "${device_name} WiFi RSSI"
    id: ${device_id}_rssi
  - platform: uptime
    name: "${device_name} Uptime"
    id: ${device_id}_uptime

switch:
  - platform: restart
    name: "${device_name} Restart"
